name: build-procursus-debs

on:
  workflow_dispatch:
    inputs:
      cfVer:
        description: 'Core Foundation Version'
        required: true
        type: number

defaults:
  run:
    shell: bash

env:
  MEMO_TARGET: iphoneos-arm64

jobs:
  build:
    runs-on: macos-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        package: [
          lsof, ldid, libplist, apt-package, apt, base, bash, bash-completion, brotli, cacerts, chariz-keyring, coreutils,
          darwintools, dash, debianutils, diffutils, diskdev-cmds, dpkg, essential, file-cmds, findutils, firmware-sbin,
          gnupg, grep, havoc-keyring, launchctl, libassuan, libxcrypt, dimentio, libedit, libffi, libgcrypt, libgmp10,
          gnutls, libgpg, neofetch, libidn2, gettext, dropbear, libiosexec, libkernrw, lz4, xz, libmd, ncurses, nettle,
          npth, p11-kit, openpam, readline, libtasn1, libunistring, xxhash, zlib-ng, zstd, odyssey-keyring, openssh,
          openssl, packix-keyring, keyring, profile.d, sed, shell-cmds, shshd, snaputil, sudo, tar, uikittools, vi, zsh,
          nano, jlutil, curl, cowsay, file, git, htop, make, p7zip, gawk, gettext-localizations, gzip, mpfr4, pam-modules,
          pcre, system-cmds, unzip, zip, unrar, nickchan-keyring, nyuszika7h-keyring, amy-keyring, adv-cmds, bzip2, iokittools,
          less, kext-tools, libarchive, network-cmds, plutil, text-cmds, vim, defaults, uuid, libksba, libtommath, libtomcrypt,
          rtmpdump, libssh2, nghttp2, build-essential, llvm, jtool2
        ]
    steps:
      - name: Download zstd
        id: download-zstd
        run: |
          dir=$(mktemp -d /tmp/XXXX) && cd "${dir}"
          curl -LO https://cameronkatri.com/zstd
          chmod +x ./zstd
          echo "DIR=${dir}" >> $GITHUB_OUTPUT

      - name: Boostrap Procursus
        run: |
          dir="${{ steps.download-zstd.outputs.DIR }}" && cd "${dir}"
          curl -L https://apt.procurs.us/bootstrap_darwin-amd64.tar.zst -o bootstrap.tar.zst
          ./zstd -dk bootstrap.tar.zst
          sudo tar -xvpkf ./bootstrap.tar -C / || :
          cd -
          rm -vrf "${dir}"

      - name: Add Procusus to PATH
        run: |
          PROCURSUS_PATHS=("/opt/procursus/games" "/opt/procursus/sbin" "/opt/procursus/bin" "/opt/procursus/local/sbin" "/opt/procursus/local/bin")
          for i in "${PROCURSUS_PATHS[@]}";
          do
            case ":$PATH:" in
              *:$i:*) echo "$i is already in PATH, not adding";;
              *) echo "$i" >> $GITHUB_PATH;;
            esac
          done

          case ":$CPATH:" in
            *:/opt/procursus/include:*) echo "/opt/procursus/include already in CPATH, not adding";;
            *) echo "CPATH=$CPATH:/opt/procursus/include" >> $GITHUB_ENV;;
          esac

          case ":$LIBRARY_PATH:" in
            *:/opt/procursus/lib:*) echo "/opt/procursus/lib already in LIBRARY_PATH, not adding";;
            *) echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/procursus/lib" >> $GITHUB_ENV;;
          esac

      - name: Create unprivileged user for APT method
        run: |
          # Taken from Procursus' apt.postinst
          set -e
          getHiddenUserUid()
          {
            local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
            local __NewUID
            for __NewUID in $__UIDS
            do
                if [[ $__NewUID -lt 499 ]] ; then
                    break;
                fi
            done
            echo $((__NewUID+1))
          }

          if ! id _apt &>/dev/null; then
            # add unprivileged user for the apt methods
            sudo dscl . -create /Users/_apt UserShell /usr/bin/false
            sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
            sudo dscl . -create /Users/_apt PrimaryGroupID -1
            sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
            sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
          else
            echo "APT Sandbox User already exists, not creating"
          fi

      - name: Update bootstrap
        run: |
          sudo apt-get -y update
          sudo apt-get -y --allow-downgrades dist-upgrade || :

      - name: Install necessary packages on macOS
        run: |
          sudo apt-get install -y autoconf automake autopoint bash bison cmake curl docbook-xml \
            docbook-xsl fakeroot findutils flex gawk git gnupg grep groff gzip ldid libtool make \
            ncurses-bin openssl patch pkg-config po4a python3 sed tar triehash xz-utils asciidoc zstd

      - name: Cache Procursus repo
        uses: actions/cache@v3
        id: cache
        with:
          path: Procursus
          key: procursus-${{ inputs.cfVer }}-${{ matrix.package }}
          restore-keys: |
            procursus-${{ inputs.cfVer }}-

      - name: "Check Procursus existence"
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: ${{ github.workspace }}/Procursus

      - name: Checkout Procursus
        if: steps.check_files.outputs.files_exists != 'true'
        uses: actions/checkout@v3
        with:
          repository: 'lorenzoferron98/Procursus'
          path: 'Procursus'

      - name: Build ${{ matrix.package }}
        working-directory: Procursus
        run: |
          array=("apt gnupg gnutls curl")
          if [[ " ${array[*]} " =~ " ${{ matrix.package }} " ]]; then
            MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ inputs.cfVer }} NO_PGP=1 gmake ${{ matrix.package }}-package AARCH64_CCASFLAGS=""
          else
            MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ inputs.cfVer }} NO_PGP=1 gmake ${{ matrix.package }}-package
          fi

  package:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download zstd
        id: download-zstd
        run: |
          dir=$(mktemp -d /tmp/XXXX) && cd "${dir}"
          curl -LO https://cameronkatri.com/zstd
          chmod +x ./zstd
          echo "DIR=${dir}" >> $GITHUB_OUTPUT

      - name: Boostrap Procursus
        run: |
          dir="${{ steps.download-zstd.outputs.DIR }}" && cd "${dir}"
          curl -L https://apt.procurs.us/bootstrap_darwin-amd64.tar.zst -o bootstrap.tar.zst
          ./zstd -dk bootstrap.tar.zst
          sudo tar -xvpkf ./bootstrap.tar -C / || :
          cd -
          rm -vrf "${dir}"

      - name: Add Procusus to PATH
        run: |
          PROCURSUS_PATHS=("/opt/procursus/games" "/opt/procursus/sbin" "/opt/procursus/bin" "/opt/procursus/local/sbin" "/opt/procursus/local/bin")
          for i in "${PROCURSUS_PATHS[@]}";
          do
            case ":$PATH:" in
              *:$i:*) echo "$i is already in PATH, not adding";;
              *) echo "$i" >> $GITHUB_PATH;;
            esac
          done

          case ":$CPATH:" in
            *:/opt/procursus/include:*) echo "/opt/procursus/include already in CPATH, not adding";;
            *) echo "CPATH=$CPATH:/opt/procursus/include" >> $GITHUB_ENV;;
          esac

          case ":$LIBRARY_PATH:" in
            *:/opt/procursus/lib:*) echo "/opt/procursus/lib already in LIBRARY_PATH, not adding";;
            *) echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/procursus/lib" >> $GITHUB_ENV;;
          esac

      - name: Create unprivileged user for APT method
        run: |
          # Taken from Procursus' apt.postinst
          set -e
          getHiddenUserUid()
          {
            local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
            local __NewUID
            for __NewUID in $__UIDS
            do
                if [[ $__NewUID -lt 499 ]] ; then
                    break;
                fi
            done
            echo $((__NewUID+1))
          }

          if ! id _apt &>/dev/null; then
            # add unprivileged user for the apt methods
            sudo dscl . -create /Users/_apt UserShell /usr/bin/false
            sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
            sudo dscl . -create /Users/_apt PrimaryGroupID -1
            sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
            sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
          else
            echo "APT Sandbox User already exists, not creating"
          fi

      - name: Update bootstrap
        run: |
          sudo apt-get -y update
          sudo apt-get -y --allow-downgrades dist-upgrade || :

      - name: Install necessary packages on macOS
        run: |
          sudo apt-get install -y autoconf automake autopoint bash bison cmake curl docbook-xml \
            docbook-xsl fakeroot findutils flex gawk git gnupg grep groff gzip ldid libtool make \
            ncurses-bin openssl patch pkg-config po4a python3 sed tar triehash xz-utils asciidoc zstd

      - name: Cache Procursus repo
        uses: actions/cache@v3
        id: cache
        with:
          path: Procursus
          key: procursus-${{ inputs.cfVer }}-after-build
          restore-keys: |
            procursus-${{ inputs.cfVer }}-

      - name: Create build dirs
        run: |
          mkdir -vp $GITHUB_WORKSPACE/{'binpack','my_repo'}
      
      - name: Package bootstrap
        if: ${{ success() || failure() }}
        working-directory: Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} NO_PGP=1 gmake bootstrap      

      - name: Checkout binpack
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          repository: 'ProcursusTeam/binpack'
          submodules: 'recursive'
          path: 'binpack'

      - name: Package binpack
        if: ${{ success() || failure() }}
        working-directory: binpack
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} MEMO_NO_IOSEXEC=1 NO_PGP=1 BINPACK_THICK=1 gmake binpack

      - name: Checkout my repo
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          path: 'my_repo'

      - name: Config git
        if: ${{ success() || failure() }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '30465144+github-actions[bot]@users.noreply.github.com'

      - name: Commit bootstrap
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          mkdir -vp /tmp/${{ matrix.cfver }}/bootstrap && unzstd -d -vvvv ../Procursus/build_strap/$MEMO_TARGET/${{ matrix.cfver }}/bootstrap.tar.zst -o /tmp/${{ matrix.cfver }}/bootstrap.tar
          tar -xvf /tmp/${{ matrix.cfver }}/bootstrap.tar -C /tmp/${{ matrix.cfver }}/bootstrap
          cp -v ./repos/anfora-repo.gpg /tmp/${{ matrix.cfver }}/bootstrap/private/etc/apt/trusted.gpg.d/
          tar -cvf ./repos/${{ matrix.cfver }}/bootstrap.tar -C /tmp/${{ matrix.cfver }}/bootstrap/ .
          git add .
          git commit -m "Upload bootstrap"

      - name: Commit binpack
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          mv -v ../binpack/build_strap/$MEMO_TARGET/${{ matrix.cfver }}/binpack-thick.tar ./repos/${{ matrix.cfver }}/
          mv -v ../binpack/build_strap/$MEMO_TARGET/${{ matrix.cfver }}/binpack-thick.tc ./repos/${{ matrix.cfver }}/
          git add .
          git commit -m "Upload binpack"

      - name: Commit packages
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          rm -vrf ../Procursus/build_dist/$MEMO_TARGET/${{ matrix.cfver }}/work/
          rsync --progress -r -u -v ../Procursus/build_dist/$MEMO_TARGET/${{ matrix.cfver }}/* ./repos/${{ matrix.cfver }}/debs/
          git add .
          git commit -m "Upload packages"

      - name: Push bootstrap, binpack and packages
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          git push

      - name: Cleanup
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
