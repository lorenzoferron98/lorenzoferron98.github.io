name: build-procursus-debs
on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  MEMO_TARGET: iphoneos-arm64

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        cfver: [ 1800 ]
    steps:
      - name: Download zstd
        id: download-zstd
        run: |
          dir=$(mktemp -d /tmp/XXXX) && cd "${dir}"
          curl -LO https://cameronkatri.com/zstd
          chmod +x ./zstd
          echo "DIR=${dir}" >> $GITHUB_OUTPUT

      - name: Boostrap Procursus
        run: |
          dir="${{ steps.download-zstd.outputs.DIR }}" && cd "${dir}"
          curl -L https://apt.procurs.us/bootstraps/big_sur/bootstrap-darwin-amd64.tar.zst -o bootstrap.tar.zst
          ./zstd -dk bootstrap.tar.zst
          sudo tar -xvpkf ./bootstrap.tar -C / || :
          cd -
          rm -vrf "${dir}"

      - name: Add Procusus to PATH
        run: |
          PROCURSUS_PATHS=("/opt/procursus/games" "/opt/procursus/sbin" "/opt/procursus/bin" "/opt/procursus/local/sbin" "/opt/procursus/local/bin")
          for i in "${PROCURSUS_PATHS[@]}";
          do
            case ":$PATH:" in
              *:$i:*) echo "$i is already in PATH, not adding";;
              *) echo "$i" >> $GITHUB_PATH;;
            esac
          done
          
          case ":$CPATH:" in
            *:/opt/procursus/include:*) echo "/opt/procursus/include already in CPATH, not adding";;
            *) echo "CPATH=$CPATH:/opt/procursus/include" >> $GITHUB_ENV;;
          esac
          
          case ":$LIBRARY_PATH:" in
            *:/opt/procursus/lib:*) echo "/opt/procursus/lib already in LIBRARY_PATH, not adding";;
            *) echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/procursus/lib" >> $GITHUB_ENV;;
          esac

      - name: Create unprivileged user for APT method
        run: |
          # Taken from Procursus' apt.postinst
          set -e
          getHiddenUserUid()
          {
            local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
            local __NewUID
            for __NewUID in $__UIDS
            do
                if [[ $__NewUID -lt 499 ]] ; then
                    break;
                fi
            done
            echo $((__NewUID+1))
          }
          
          if ! id _apt &>/dev/null; then
            # add unprivileged user for the apt methods
            sudo dscl . -create /Users/_apt UserShell /usr/bin/false
            sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
            sudo dscl . -create /Users/_apt PrimaryGroupID -1
            sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
            sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
          else
            echo "APT Sandbox User already exists, not creating"
          fi

      - name: Update bootstrap
        run: |
          sudo apt-get -y update
          sudo apt-get -y --allow-downgrades dist-upgrade || :

      - name: Install necessary packages on macOS
        run: |
          sudo apt-get install -y autoconf automake autopoint bash bison cmake curl docbook-xml \
            docbook-xsl fakeroot findutils flex gawk git gnupg grep groff gzip ldid libtool make \
            ncurses-bin openssl patch pkg-config po4a python3 sed tar triehash xz-utils asciidoc zstd

      - name: Checkout Procursus
        uses: actions/checkout@v3
        with:
          repository: 'lorenzoferron98/Procursus'
          path: 'Procursus'

      - name: Build ldid
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake ldid-package

      - name: Build libplist
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libplist-package

      - name: Build apt
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake apt-package AARCH64_CCASFLAGS=""

      - name: Build base
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake base-package

      - name: Build bash
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake bash-package

      - name: Build bash-completion
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake bash-completion-package

      - name: Build brotli
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake brotli-package

      - name: Build cacerts
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake cacerts-package

      - name: Build chariz-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake chariz-keyring-package

      - name: Build coreutils
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake coreutils-package

      - name: Build darwintools
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake darwintools-package

      - name: Build dash
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake dash-package

      - name: Build debianutils
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake debianutils-package

      - name: Build diffutils
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake diffutils-package

      - name: Build diskdev-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake diskdev-cmds-package

      - name: Build dpkg
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake dpkg-package

      - name: Build essential
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake essential-package

      - name: Build file-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake file-cmds-package

      - name: Build findutils
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake findutils-package

      - name: Build firmware-sbin
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake firmware-sbin-package

      - name: Build gnupg
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake gnupg-package AARCH64_CCASFLAGS=""

      - name: Build grep
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake grep-package

      - name: Build havoc-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake havoc-keyring-package

      - name: Build launchctl
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake launchctl-package

      - name: Build libassuan
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libassuan-package

      - name: Build libxcrypt
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libxcrypt-package

      - name: Build dimentio
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake dimentio-package

      - name: Build libedit
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libedit-package

      - name: Build libffi
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libffi-package

      - name: Build libgcrypt
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libgcrypt-package

      - name: Build libgmp10
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libgmp10-package

      - name: Build gnutls
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake gnutls-package AARCH64_CCASFLAGS=""

      - name: Build libgpg-error
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libgpg-error-package

      - name: Build neofetch
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake neofetch-package

      - name: Build libidn2
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libidn2-package

      - name: Build gettext
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake gettext-package

      - name: Build dropbear
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake dropbear-package

      - name: Build libiosexec
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libiosexec-package

      - name: Build libkernrw
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libkernrw-package

      - name: Build lz4
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake lz4-package

      - name: Build xz
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake xz-package

      - name: Build libmd
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libmd-package

      - name: Build ncurses
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake ncurses-package

      - name: Build nettle
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake nettle-package

      - name: Build npth
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake npth-package

      - name: Build p11-kit
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake p11-kit-package

      - name: Build openpam
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake openpam-package

      - name: Build readline
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake readline-package

      - name: Build libtasn1
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libtasn1-package

      - name: Build libunistring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libunistring-package

      - name: Build xxhash
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake xxhash-package

      - name: Build zlib-ng
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake zlib-ng-package

      - name: Build zstd
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake zstd-package

      - name: Build odyssey-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake odyssey-keyring-package

      - name: Build openssh
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake openssh-package

      - name: Build openssl
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake openssl-package

      - name: Build packix-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake packix-keyring-package

      - name: Build keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake keyring-package

      - name: Build profile.d
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake profile.d-package

      - name: Build sed
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake sed-package

      - name: Build shell-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake shell-cmds-package

      - name: Build shshd
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake shshd-package

      - name: Build snaputil
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake snaputil-package

      - name: Build sudo
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake sudo-package

      - name: Build tar
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake tar-package

      - name: Build uikittools
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake uikittools-package

      - name: Build vi
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake vi-package

      - name: Build zsh
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake zsh-package

      - name: Build nano
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake nano-package

      - name: Build jlutil
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake jlutil-package

      - name: Build curl
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake curl-package AARCH64_CCASFLAGS=""

      - name: Build cowsay
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake cowsay-package

      - name: Build file
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake file-package

      - name: Build git
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake git-package

      - name: Build htop
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake htop-package

      - name: Build make
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake make-package

      - name: Build p7zip
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake p7zip-package

      - name: Build gawk
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake gawk-package

      - name: Build gettext-localizations
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake gettext-localizations-package

      - name: Build gzip
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake gzip-package

      - name: Build mpfr4
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake mpfr4-package

      - name: Build pam-modules
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake pam-modules-package

      - name: Build pcre
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake pcre-package

      - name: Build system-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake system-cmds-package

      - name: Build unzip
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake unzip-package

      - name: Build zip
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake zip-package

      - name: Build unrar
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake unrar-package

      - name: Build nickchan-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake nickchan-keyring-package

      - name: Build nyuszika7h-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake nyuszika7h-keyring-package

      - name: Build amy-keyring
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake amy-keyring-package

      - name: Build adv-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake adv-cmds-package

      - name: Build bzip2
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake bzip2-package

      - name: Build iokittools
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake iokittools-package

      - name: Build less
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake less-package

      - name: Build kext-tools
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake kext-tools-package

      - name: Build libarchive
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libarchive-package

      - name: Build network-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake network-cmds-package

      - name: Build lsof
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake lsof-package

      - name: Build plutil
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake plutil-package

      - name: Build text-cmds
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake text-cmds-package

      - name: Build vim
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake vim-package

      - name: Build defaults
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake defaults-package

      - name: Build uuid
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake uuid-package

      - name: Build libksba
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libksba-package

      - name: Build libtommath
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libtommath-package

      - name: Build libtomcrypt
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libtomcrypt-package

      - name: Build rtmpdump
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake rtmpdump-package

      - name: Build libssh2
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libssh2-package

      - name: Build nghttp2
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake nghttp2-package

      - name: Build build-essential
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake build-essential-package

      - name: Build jtool2
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake jtool2-package

      - name: Build xar
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake xar-package

      - name: Build berkeleydb
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake berkeleydb-package

      - name: Build libtool
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libtool-package
          
      - name: Build libusb
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libusb-package          

      - name: Build libc-ares
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libc-ares-package
          
      - name: Build libev
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libev-package  

      - name: Build jansson
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake jansson-package
          
      - name: Build libjemalloc
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libjemalloc-package

      - name: Build libevent
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake libevent-package

      - name: Build liblzo2
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake liblzo2-package

      # Instead of running `actions/cache@v3` directly, check it out locally.
      - name: Checkout actions/cache@v3
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          repository: actions/cache
          ref: v3
          path: .tmp/actions/cache
      - name: Make actions/cache@v3 run always, not only when job succeeds
        if: ${{ success() || failure() }}
        # Tweak `action.yml` of `actions/cache@v3` to remove its `post-if`
        # condition, making it default to `post-if: always()`.
        run: |
          sed -i -e '/ post-if: /d' .tmp/actions/cache/action.yml

      - name: Cache Procursus repo
        if: ${{ success() || failure() }}
        uses: ./.tmp/actions/cache
        id: cache
        with:
          path: Procursus
          key: procursus-${{ matrix.cfver }}-${{ github.job }}


  llvm:
    needs: build
    if: ${{ success() || failure() }}
    runs-on: macos-latest
    strategy:
      matrix:
        cfver: [ 1800 ]
    steps:
      - name: Download zstd
        id: download-zstd
        run: |
          dir=$(mktemp -d /tmp/XXXX) && cd "${dir}"
          curl -LO https://cameronkatri.com/zstd
          chmod +x ./zstd
          echo "DIR=${dir}" >> $GITHUB_OUTPUT

      - name: Boostrap Procursus
        run: |
          dir="${{ steps.download-zstd.outputs.DIR }}" && cd "${dir}"
          curl -L https://apt.procurs.us/bootstraps/big_sur/bootstrap-darwin-amd64.tar.zst -o bootstrap.tar.zst
          ./zstd -dk bootstrap.tar.zst
          sudo tar -xvpkf ./bootstrap.tar -C / || :
          cd -
          rm -vrf "${dir}"

      - name: Add Procusus to PATH
        run: |
          PROCURSUS_PATHS=("/opt/procursus/games" "/opt/procursus/sbin" "/opt/procursus/bin" "/opt/procursus/local/sbin" "/opt/procursus/local/bin")
          for i in "${PROCURSUS_PATHS[@]}";
          do
            case ":$PATH:" in
              *:$i:*) echo "$i is already in PATH, not adding";;
              *) echo "$i" >> $GITHUB_PATH;;
            esac
          done
          
          case ":$CPATH:" in
            *:/opt/procursus/include:*) echo "/opt/procursus/include already in CPATH, not adding";;
            *) echo "CPATH=$CPATH:/opt/procursus/include" >> $GITHUB_ENV;;
          esac
          
          case ":$LIBRARY_PATH:" in
            *:/opt/procursus/lib:*) echo "/opt/procursus/lib already in LIBRARY_PATH, not adding";;
            *) echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/procursus/lib" >> $GITHUB_ENV;;
          esac

      - name: Create unprivileged user for APT method
        run: |
          # Taken from Procursus' apt.postinst
          set -e
          getHiddenUserUid()
          {
            local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
            local __NewUID
            for __NewUID in $__UIDS
            do
                if [[ $__NewUID -lt 499 ]] ; then
                    break;
                fi
            done
            echo $((__NewUID+1))
          }
          
          if ! id _apt &>/dev/null; then
            # add unprivileged user for the apt methods
            sudo dscl . -create /Users/_apt UserShell /usr/bin/false
            sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
            sudo dscl . -create /Users/_apt PrimaryGroupID -1
            sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
            sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
          else
            echo "APT Sandbox User already exists, not creating"
          fi

      - name: Update bootstrap
        run: |
          sudo apt-get -y update
          sudo apt-get -y --allow-downgrades dist-upgrade || :

      - name: Install necessary packages on macOS
        run: |
          sudo apt-get install -y autoconf automake autopoint bash bison cmake curl docbook-xml \
            docbook-xsl fakeroot findutils flex gawk git gnupg grep groff gzip ldid libtool make \
            ncurses-bin openssl patch pkg-config po4a python3 sed tar triehash xz-utils asciidoc zstd

      # Instead of running `actions/cache@v3` directly, check it out locally.
      - name: Checkout actions/cache@v3
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          repository: actions/cache
          ref: v3
          path: .tmp/actions/cache
      - name: Make actions/cache@v3 run always, not only when job succeeds
        if: ${{ success() || failure() }}
        # Tweak `action.yml` of `actions/cache@v3` to remove its `post-if`
        # condition, making it default to `post-if: always()`.
        run: |
          sed -i -e '/ post-if: /d' .tmp/actions/cache/action.yml

      - name: Cache Procursus repo
        uses: ./.tmp/actions/cache
        id: cache
        with:
          path: Procursus
          key: procursus-${{ matrix.cfver }}-${{ github.job }}
          restore-keys: |
            procursus-${{ matrix.cfver }}-

      - name: Build llvm
        if: ${{ success() || failure() }}
        working-directory: ./Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake llvm-package


  package:
    needs: llvm
    if: ${{ success() || failure() }}
    runs-on: macos-latest
    strategy:
      matrix:
        cfver: [ 1800 ]
    steps:
      - name: Download zstd
        id: download-zstd
        run: |
          dir=$(mktemp -d /tmp/XXXX) && cd "${dir}"
          curl -LO https://cameronkatri.com/zstd
          chmod +x ./zstd
          echo "DIR=${dir}" >> $GITHUB_OUTPUT

      - name: Boostrap Procursus
        run: |
          dir="${{ steps.download-zstd.outputs.DIR }}" && cd "${dir}"
          curl -L https://apt.procurs.us/bootstraps/big_sur/bootstrap-darwin-amd64.tar.zst -o bootstrap.tar.zst
          ./zstd -dk bootstrap.tar.zst
          sudo tar -xvpkf ./bootstrap.tar -C / || :
          cd -
          rm -vrf "${dir}"

      - name: Add Procusus to PATH
        run: |
          PROCURSUS_PATHS=("/opt/procursus/games" "/opt/procursus/sbin" "/opt/procursus/bin" "/opt/procursus/local/sbin" "/opt/procursus/local/bin")
          for i in "${PROCURSUS_PATHS[@]}";
          do
            case ":$PATH:" in
              *:$i:*) echo "$i is already in PATH, not adding";;
              *) echo "$i" >> $GITHUB_PATH;;
            esac
          done

          case ":$CPATH:" in
            *:/opt/procursus/include:*) echo "/opt/procursus/include already in CPATH, not adding";;
            *) echo "CPATH=$CPATH:/opt/procursus/include" >> $GITHUB_ENV;;
          esac

          case ":$LIBRARY_PATH:" in
            *:/opt/procursus/lib:*) echo "/opt/procursus/lib already in LIBRARY_PATH, not adding";;
            *) echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/procursus/lib" >> $GITHUB_ENV;;
          esac

      - name: Create unprivileged user for APT method
        run: |
          # Taken from Procursus' apt.postinst
          set -e
          getHiddenUserUid()
          {
            local __UIDS=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ugr)
            local __NewUID
            for __NewUID in $__UIDS
            do
                if [[ $__NewUID -lt 499 ]] ; then
                    break;
                fi
            done
            echo $((__NewUID+1))
          }

          if ! id _apt &>/dev/null; then
            # add unprivileged user for the apt methods
            sudo dscl . -create /Users/_apt UserShell /usr/bin/false
            sudo dscl . -create /Users/_apt NSFHomeDirectory /var/empty
            sudo dscl . -create /Users/_apt PrimaryGroupID -1
            sudo dscl . -create /Users/_apt UniqueID $(getHiddenUserUid)
            sudo dscl . -create /Users/_apt RealName "APT Sandbox User"
          else
            echo "APT Sandbox User already exists, not creating"
          fi

      - name: Update bootstrap
        run: |
          sudo apt-get -y update
          sudo apt-get -y --allow-downgrades dist-upgrade || :

      - name: Install necessary packages on macOS
        run: |
          sudo apt-get install -y autoconf automake autopoint bash bison cmake curl docbook-xml \
            docbook-xsl fakeroot findutils flex gawk git gnupg grep groff gzip ldid libtool make \
            ncurses-bin openssl patch pkg-config po4a python3 sed tar triehash xz-utils asciidoc zstd

      # Instead of running `actions/cache@v3` directly, check it out locally.
      - name: Checkout actions/cache@v3
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          repository: actions/cache
          ref: v3
          path: .tmp/actions/cache
      - name: Make actions/cache@v3 run always, not only when job succeeds
        if: ${{ success() || failure() }}
        # Tweak `action.yml` of `actions/cache@v3` to remove its `post-if`
        # condition, making it default to `post-if: always()`.
        run: |
          sed -i -e '/ post-if: /d' .tmp/actions/cache/action.yml

      - name: Cache Procursus repo
        uses: ./.tmp/actions/cache
        id: cache
        with:
          path: Procursus
          key: procursus-${{ matrix.cfver }}-post-build
          restore-keys: |
            procursus-${{ matrix.cfver }}-

      - name: Create build dirs
        run: |
          mkdir -vp $GITHUB_WORKSPACE/{'binpack','my_repo'}

      - name: Package bootstrap
        if: ${{ success() || failure() }}
        working-directory: Procursus
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} gmake bootstrap      

      - name: Checkout binpack
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          repository: 'ProcursusTeam/binpack'
          submodules: 'recursive'
          path: 'binpack'

      - name: Package binpack
        if: ${{ success() || failure() }}
        working-directory: binpack
        run: |
          MEMO_TARGET=$MEMO_TARGET MEMO_CFVER=${{ matrix.cfver }} MEMO_NO_IOSEXEC=1 BINPACK_THICK=1 gmake binpack

      - name: Checkout my repo
        if: ${{ success() || failure() }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          path: 'my_repo'

      - name: Config git
        if: ${{ success() || failure() }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '30465144+github-actions[bot]@users.noreply.github.com'

      - name: Commit bootstrap
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          mkdir -vp /tmp/${{ matrix.cfver }}/bootstrap && unzstd -d -vvvv ../Procursus/build_strap/$MEMO_TARGET/${{ matrix.cfver }}/bootstrap.tar.zst -o /tmp/${{ matrix.cfver }}/bootstrap.tar
          tar -xvf /tmp/${{ matrix.cfver }}/bootstrap.tar -C /tmp/${{ matrix.cfver }}/bootstrap
          cp -v ./repos/anfora-repo.gpg /tmp/${{ matrix.cfver }}/bootstrap/private/etc/apt/trusted.gpg.d/
          tar -cvf ./repos/${{ matrix.cfver }}/bootstrap.tar -C /tmp/${{ matrix.cfver }}/bootstrap/ .
          git add .
          git commit -m "Upload bootstrap"

      - name: Commit binpack
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          mv -v ../binpack/build_strap/$MEMO_TARGET/${{ matrix.cfver }}/binpack-thick.tar ./repos/${{ matrix.cfver }}/
          mv -v ../binpack/build_strap/$MEMO_TARGET/${{ matrix.cfver }}/binpack-thick.tc ./repos/${{ matrix.cfver }}/
          git add .
          git commit -m "Upload binpack"

      - name: Commit packages
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          rm -vrf ../Procursus/build_dist/$MEMO_TARGET/${{ matrix.cfver }}/work/
          rsync --progress -r -u -v ../Procursus/build_dist/$MEMO_TARGET/${{ matrix.cfver }}/* ./repos/${{ matrix.cfver }}/debs/
          git add .
          git commit -m "Upload packages"

      - name: Push bootstrap, binpack and packages
        if: ${{ success() || failure() }}
        working-directory: my_repo
        run: |
          git push
